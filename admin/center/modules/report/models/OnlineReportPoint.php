<?phpnamespace center\modules\report\models;use Yii;use yii\db\Query;use common\extend\Excel;use center\extend\Tool;/** * This is the model class for table "Online_Report_Point". * * @property integer $time_point * @property integer $count */class OnlineReportPoint extends \yii\db\ActiveRecord{    public $start_At; //开始时间    public $stop_At; //截止时间    public $step; //步长    public $unit; //时间修饰词    private static $_instance;    /**     * @inheritdoc     */    public static function tableName()    {        return '{{%online_report_point}}';    }    /**     * @inheritdoc     */    public function rules()    {        return [            [['start_At', 'stop_At'], 'required'],            [['time_point', 'count'], 'integer'],            ['step', 'integer', 'min' => 1],            [['start_At', 'stop_At', 'unit'], 'string'],        ];    }    /**     * @inheritdoc     */    public function attributeLabels()    {        return [            'time_point' => 'Time',            'count' => 'Online Number',            'start_At' => Yii::t('app', 'start time'),            'stop_At' => Yii::t('app', 'end time'),            'step' => Yii::t('app', 'OnlineSummaryReport_model-step'),            'unit' => Yii::t('app', 'OnlineSummaryReport_model-unit')        ];    }    //单例方法,用于访问实例的公共的静态方法    public static function getInstance()    {        if (!(self::$_instance instanceof self)) {            self::$_instance = new self;        }        return self::$_instance;    }    public static function getAttributesList()    {        return [            'step' => [                1 => '1',                2 => '2',                3 => '3',                4 => '4',                5 => '5',                6 => '6',                7 => '7',                8 => '8',                9 => '9',                10 => '10',                15 => '15',                20 => '20',                25 => '25',            ]        ];    }    public static function getOlineAttributes()    {        return [            'step' => [                10 => '10',                15 => '15',                20 => '20',                25 => '25',                30 => '30',            ],            'date' => [                'minutes' => Yii::t('app', 'minutes')            ],        ];    }    //验证输入时间的合理性以及时间不长的合理性    public function validateField()    {        $start_At = strtotime($this->start_At); //开始时间        $stop_At = strtotime($this->stop_At); //结束时间        if ($stop_At === $start_At || $stop_At < $start_At) {            $this->addError($this->stop_At, Yii::t('app', 'end time error'));        }        if ($this->step <= 0) {            $this->addError($this->step, Yii::t('app', 'step error'));        }        if (($stop_At - $start_At) < ($this->step * Tool::getTimeDate($this->unit))) {            $this->addError($this->unit, Yii::t('app', 'report operate remind16'));            return false;        }        if (($stop_At - $start_At) / 3600 > 13) {            $this->addError($this->unit, Yii::t('app', 'report operate remind26'));            return false;        }        return true;    }    //在线人数报表统计    public function getTodayOnline($params)    {        $unit = $params->unit; //单位  比如 分钟 小时  天  月 年        $step = $params->step; //步长  比如一分钟  一小时 一天 一月 一年        $start_At = strtotime($params->start_At);        $stop_At = strtotime($params->stop_At);        if (empty($start_At)) {            $unit = 'minutes';            $step = 5;            $start_At = strtotime(date('Y-m-d H:00', time() - 3600));            $stop_At = strtotime(date('Y-m-d H:00', time()));        }        //对输入的时间进行切分 比如 10：00 10：05 10：10 10：15 这样子.        $tool = new Tool();        $xAxis = $tool->substrTime($start_At, $stop_At, $unit, $step);        $yAxis = array();        for ($i = 0; $i < count($xAxis) - 1; $i++) {            if ($i != count($xAxis) - 2) {                $data = $this->find()->select('count,time_point')->where(['>', 'time_point', $xAxis[$i]])->andWhere(['<=', 'time_point', $xAxis[$i] + 300])->asArray()->all();            } else {                $count = (new Query())->from('online_radius')->count();                $data[0] = [                    'time_point' => $xAxis[$i],                    'count' => $count,                ];            }            if (count($data) > 0) {                $yAxis[] = $data;            }        }        $yAxisData = array();        if (!empty($yAxis)) {            foreach ($yAxis as $key => $value) {                $xAxistime[] = $value[0]['time_point'];                $yAxisData[] = $value[0]['count'];            }        }        $yAxisString = implode(',', $yAxisData);        if (empty($xAxistime)) {            $xAxistime = $xAxis;        }        $source = [            'xAxis' => $tool->formatTime($unit, $xAxistime),            'yAxis' => $yAxisString,        ];        return $source;    }    /**     * 在线人数统计     * @param $params     * @param string $type     * @return array     */    public function getOnline($params, $type = '')    {        $start_At = strtotime($params->start_At);        if ($params->stop_At == date('Y-m-d')) {            $stop_At = time() - 10 * 60;        } else {            $stop_At = strtotime($params->stop_At) + 86399;        }        //var_dump($params->start_At, $params->stop_At);exit;        if (empty($start_At)) {            $start_At = strtotime(date('Y-m-d'));            $stop_At = time();        }        //对输入的时间进行切分 比如 10：00 10：05 10：10 10：15 这样子.        $data = self::find()            ->where(['between', 'time_point', $start_At, $stop_At])            ->indexBy('time_point')            ->asArray()            ->orderBy('time_point asc')            ->all();        $rs = $this->getRsData($data, $type);        //var_dump($rs['detail']);exit;        $series = json_encode($rs['data']);        return [            'table' => array_reverse($rs['table']),            'detail' => $rs['detail'],            'data' => [                'series' => $series,                'xAxis' => json_encode($rs['xAxis']),                'legends' => json_encode($rs['legends'])            ]        ];    }    /**     * 打包数据     * @param $data     * @return array     */    public function getArrSeries($data)    {        $result = [];        foreach ($data['data'] as $key => $value) {            //循环构造结果集数据            $result[$key]['data'] = $value;            $result[$key]['xAxis'] = $data['legends'][$key];        }        // var_dump($result);exit;        return $result;    }    /**     * 打包数据     * @param $data     * @return array     */    public function getSeries($data)    {        $result = [];        $result = array_values($data['detail']);        return $result;    }    /**     * excel导出     * @param string $type     */    public function export($type = '')    {        $data = Yii::$app->session->get('data');        $detail = Yii::$app->session->get('detail');        $excelData = [];        $excelData[0] = ['日期|时间', '在线数|最大在线'];        if (!empty($data)) {            foreach ($data as $date => $max) {                if (isset($detail[$date])) {                    foreach ($detail[$date] as $hour => $value) {                        $excelData[] = [$date . ' ' . $hour, $value];                    }                }                $excelData[] = [$date, $max];            }            $excelData = array_merge($excelData, $data);            $file = '在线统计' . '.xls';            $title = Yii::t('app', 'batch export');            //将内容写入excel文件            Excel::header_file($excelData, $file, $title);            exit;        }    }    public function getRsData($data, $type)    {        if (!empty($type)) {            $rs = $this->getSignleData($data);        } else {            $rs = $this->getMultiData($data);        }        return $rs;    }    /**     * 获取多天在线数据     * @param $data     * @return array     */    public function getMultiData($data)    {        $rs = $legends = $table = $cache = $detail = $date = [];        foreach ($data as $base => $val) {            $count = $val['count'];            $day = date('Y-m-d', $base);            $hour = date('H:i', $base);            $time = date('Y-m-d H:i', $base);            $rs[] = $count;            $legends[] = $time;            if (!in_array($day, $date)) {                $date[] = $day;            }            $day = date('Y-m-d', $base);            $table[$day] = isset($table[$day]) ? max($table[$day], $count) : $count;            $detail[$day][$hour] = isset($detail[$day][$hour]) ? max($detail[$day][$hour], $count) : $count;        }        return ['table' => $table, 'data' => $rs, 'legends' => $legends, 'detail' => $detail, 'xAxis' => $date];    }    /**     * 获取单天数据     * @param $data     * @return array     */    public function getSignleData($data)    {        $rs = $legends = $table = $cache = $detail = [];        foreach ($data as $base => $val) {            $count = $val['count'];            $hour = date('H:i', $base);            $rs[] = $count;            $day = date('Y-m-d', $base);            $table[$day] = isset($table[$day]) ? max($table[$day], $count) : $count;            $legends[] = date('H:i', $base);            $detail[$hour] = isset($detail[$hour]) ? max($detail[$hour], $count) : $count;        }        return ['table' => $table, 'data' => $rs, 'legends' => $legends, 'detail' => $detail];    }    /**     * 获取位置     * @param $time     * @param $arr     * @return int|string     */    public function getTime($time, $arr)    {        $step = !empty($this->step) ? $this->step : 10;        foreach ($arr as $k => $v) {            if ($time >= $v && $time < $v + $step * 60) {                return $v;            }        }        return $v;    }    public function getTimes($sta, $end)    {        $step = !empty($this->step) ? $this->step : 10;        $times = [];        while ($sta <= $end) {            $times[] = $sta;            $sta += $step * 60;        }        return $times;    }}